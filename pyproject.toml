[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{ package_slug }}"
version = "0.1.0"
description = "A production-grade Python project template for CLI and data science pipelines."
readme = "README.md"
requires-python = ">={{ python_version }}"
license = {text = "{{ license }}"}
authors = [
    {name = "{{ author_name }}", email = "{{ author_email }}"},
]
maintainers = [
    {name = "{{ author_name }}", email = "{{ author_email }}"},
]
keywords = ["python", "cli", "data-science", "pipeline", "uv"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: {{ license }} License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.{{ python_version.split('.')[1] }}",
    "Programming Language :: Python :: 3.{{ python_version.split('.')[1] + 1 }}",
    "Programming Language :: Python :: 3.{{ python_version.split('.')[1] + 2 }}",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
dependencies = [
    "click>=8.0.0",
    "pyyaml>=6.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "pandas>=2.0.0",
    "numpy>=1.20.0",
    "torch>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]
lint = [
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]

[project.urls]
Homepage = "https://github.com/{{ github_username }}/{{ project_slug }}"
Documentation = "https://{{ github_username }}.github.io/{{ project_slug }}"
Repository = "https://github.com/{{ github_username }}/{{ project_slug }}.git"
Issues = "https://github.com/{{ github_username }}/{{ project_slug }}/issues"
Changelog = "https://github.com/{{ github_username }}/{{ project_slug }}/blob/main/CHANGELOG.md"

[project.scripts]
{{ package_slug }} = "{{ package_slug }}.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/{{ package_slug }}"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/scripts",
    "/tools",
    "/.github",
    "/README.md",
    "/PLAN.md",
    "/TODO.md",
    "/SPEC.md",
    "/PROTOCOL.md",
    "/CONSTRAINTS.md",
    "/DATA_MANIFEST.md",
    "/MODEL_MANIFEST.md",
    "/EVAL_PLAN.md",
    "/DECISIONS.md",
    "/DEPLOYMENT.md",
    "/GLOSSARY.md",
    "/pyproject.toml",
    "/.gitignore",
    "/.pre-commit-config.yaml",
    "/.ruff.toml",
    "/mypy.ini",
    "/LICENSE",
]

[tool.ruff]
target-version = "py{{ python_version.replace('.', '') }}"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["{{ package_slug }}"]

[tool.mypy]
python_version = "{{ python_version }}"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/{{ package_slug }}"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

